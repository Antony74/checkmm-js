var checkmm=function(t){var e={};function r(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)r.d(n,o,function(e){return t[e]}.bind(null,o));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=1)}([function(t,e){var r,n,o=t.exports={};function s(){throw new Error("setTimeout has not been defined")}function i(){throw new Error("clearTimeout has not been defined")}function a(t){if(r===setTimeout)return setTimeout(t,0);if((r===s||!r)&&setTimeout)return r=setTimeout,setTimeout(t,0);try{return r(t,0)}catch(e){try{return r.call(null,t,0)}catch(e){return r.call(this,t,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:s}catch(t){r=s}try{n="function"==typeof clearTimeout?clearTimeout:i}catch(t){n=i}}();var u,c=[],f=!1,l=-1;function h(){f&&u&&(f=!1,u.length?c=u.concat(c):l=-1,c.length&&p())}function p(){if(!f){var t=a(h);f=!0;for(var e=c.length;e;){for(u=c,c=[];++l<e;)u&&u[l].run();l=-1,e=c.length}u=null,f=!1,function(t){if(n===clearTimeout)return clearTimeout(t);if((n===i||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(t);try{n(t)}catch(e){try{return n.call(null,t)}catch(e){return n.call(this,t)}}}(t)}}function v(t,e){this.fun=t,this.array=e}function d(){}o.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)e[r-1]=arguments[r];c.push(new v(t,e)),1!==c.length||f||a(p)},v.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=d,o.addListener=d,o.once=d,o.off=d,o.removeListener=d,o.removeAllListeners=d,o.emit=d,o.prependListener=d,o.prependOnceListener=d,o.listeners=function(t){return[]},o.binding=function(t){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(t){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(t,e,r){"use strict";var n,o=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var s=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e.prototype.readTokensAsync=function(t,e){var r=this;this.mmFileNames.has(t)?e(""):(this.mmFileNames.add(t),fetch(t).then(function(t){return t.text()}).then(function(t){for(var n,o=!1,s=!1,i="",a="";a=(n=r.nexttoken(t)).token,t=n.input,a.length;)if(o){if("$)"===a){o=!1;continue}if(-1!==a.indexOf("$("))return void e("Characters $( found in a comment");if(-1!==a.indexOf("$)"))return void e("Characters $) found in a comment")}else if("$("!==a)if(s){if(i.length){if("$]"!==a)return void e("Didn't find closing file inclusion delimiter");if(!r.readtokens(i))return;s=!1,i="";continue}if(-1!==a.indexOf("$"))return void e("Filename "+a+" contains a $");i=a}else"$["!==a?r.tokens.push(a):s=!0;else o=!0;e(o?"Unclosed comment":s?"Unfinished file inclusion command":"")}))},e}(r(2).CheckMM);e.CheckMMex=s},function(t,e,r){"use strict";(function(t,n){var o,s=this&&this.__extends||(o=function(t,e){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),i=this&&this.__assign||function(){return(i=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var o in e=arguments[r])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},a=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)Object.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e.default=t,e},u=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var c,f=a(r(3)),l=a(r(4)),h=u(r(5));function p(t,e){if(t.length!==e.length)return!1;for(var r=0;r<t.length;++r)if(t[r]!==e[r])return!1;return!0}!function(t){t.isupper=function(t){return!/[^A-Z]/.test(t)},t.isalnum=function(t){return!/[^a-zA-Z0-9]/.test(t)},t.set_intersection=function(t,e){var r=new Set;return t.forEach(function(t){e.has(t)&&r.add(t)}),r};var e=function(){return function(){}}();t.Pair=e}(c=e.std||(e.std={}));var v=function(){return function(){this.hypotheses=[],this.disjvars=[],this.expression=[]}}();e.Assertion=v;var d=function(){return function(){this.activevariables=new Set,this.activehyp=[],this.disjvars=[],this.floatinghyp={}}}();e.Scope=d;var y=function(){return function(){this.tokens=[],this.constants=[],this.hypotheses={},this.variables=new Set,this.assertions={},this.scopes=[],this.nProofCount=0,this.nProofLimit=Number.MAX_SAFE_INTEGER,this.mmFileNames=new Set}}();e.State=y;var m=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return s(e,t),e.prototype.setState=function(t){var e=this,r=new y,n=i({},r,h.default(t));Object.keys(n).forEach(function(t){e[t]=n[t]})},e.prototype.getState=function(){var t=this,e=new y;return Object.keys(e).forEach(function(r){e[r]=t[r]}),h.default(e)},e.prototype.labelused=function(t){return!(!this.hypotheses[t]&&!this.assertions[t])},e.prototype.getfloatinghyp=function(t){for(var e=0;e<this.scopes.length;++e){var r=this.scopes[e].floatinghyp[t];if(void 0!==r)return r}return""},e.prototype.isactivevariable=function(t){for(var e=0;e<this.scopes.length;++e)if(this.scopes[e].activevariables.has(t))return!0;return!1},e.prototype.isactivehyp=function(t){for(var e=0;e<this.scopes.length;++e)if(void 0!==this.scopes[e].activehyp.find(function(e){return e===t}))return!0;return!1},e.prototype.isdvr=function(t,e){if(t===e)return!1;for(var r=0;r<this.scopes.length;++r)for(var n=this.scopes[r],o=0;o!==n.disjvars.length;++o){var s=n.disjvars[o];if(s.has(t)&&s.has(e))return!0}return!1},e.prototype.ismmws=function(t){return" "===t||"\n"===t||"\t"===t||"\f"===t||"\r"===t},e.prototype.islabeltoken=function(t){for(var e=0;e<t.length;++e){var r=t[e];if(!c.isalnum(r)&&"."!==r&&"-"!==r&&"_"!==r)return!1}return!0},e.prototype.ismathsymboltoken=function(t){return-1===t.indexOf("$")},e.prototype.containsonlyupperorq=function(t){for(var e=0;e<t.length;++e){var r=t[e];if(!c.isupper(r)&&"?"!==r)return!1}return!0},e.prototype.nexttoken=function(t){for(var e=null,r="";t.length&&(e=t[0],t=t.slice(1),null!==e&&this.ismmws(e)););for(null!==e&&(t=e+t);t.length&&(e=t[0],t=t.slice(1),null!==e&&!this.ismmws(e));){if(e<"!"||e>"~")return console.error("Invalid character read with code "+e.charCodeAt(0)),{token:"",input:t};r+=e}return{token:r,input:t}},e.prototype.readtokens=function(t){var e;if(this.mmFileNames.has(t))return!0;this.mmFileNames.add(t);for(var r=f.readFileSync(t,{encoding:"utf8"}),n=!1,o=!1,s="",i="";i=(e=this.nexttoken(r)).token,r=e.input,i.length;)if(n){if("$)"===i){n=!1;continue}if(-1!==i.indexOf("$("))return console.error("Characters $( found in a comment"),!1;if(-1!==i.indexOf("$)"))return console.error("Characters $) found in a comment"),!1}else if("$("!==i)if(o){if(s.length){if("$]"!==i)return console.error("Didn't find closing file inclusion delimiter"),!1;if(!this.readtokens(s))return!1;o=!1,s="";continue}if(-1!==i.indexOf("$"))return console.error("Filename "+i+" contains a $"),!1;s=i}else"$["!==i?this.tokens.push(i):o=!0;else n=!0;return n?(console.error("Unclosed comment"),!1):!o||(console.error("Unfinished file inclusion command"),!1)},e.prototype.constructassertion=function(t,e){var r=new v;r.expression=e;for(var n=new Set,o=0;o<e.length;++o){var s=e[o];this.variables.has(s)&&n.add(s)}for(var i=this.scopes.length-1;i>=0;--i){var a=this.scopes[i].activehyp;for(o=a.length-1;o>=0;--o){var u=this.hypotheses[a[o]];if(u.second&&n.has(u.first[1]))r.hypotheses.unshift(a[o]);else if(!u.second){r.hypotheses.unshift(a[o]);for(var f=0;f<u.first.length;++f)this.variables.has(u.first[f])&&n.add(u.first[f])}}}for(i=0;i<this.scopes.length;++i)for(var l=this.scopes[i].disjvars,h=function(t){var e=[];c.set_intersection(l[t],n).forEach(function(t){e.push(t)});for(var o=0;o<e.length;++o)for(var s=o+1;s<e.length;++s)r.disjvars.push([e[o],e[s]])},p=0;p<l.length;++p)h(p);return this.assertions[t]=r,r},e.prototype.readexpression=function(t,e,r){var n=[];if(!this.tokens.length)return console.error("Unfinished $"+t+" statement "+e),null;var o=this.tokens[0];if(void 0===this.constants.find(function(t){return o===t}))return console.error("First symbol in $"+t+" statement "+e+" is "+o+" which is not a constant"),null;this.tokens.shift(),n.push(o);for(var s=function(){var o=i.tokens.shift();return o===r?"break":void 0===i.constants.find(function(t){return t===o})&&0===i.getfloatinghyp(o).length?(console.error("In $"+t+" statement "+e+" token "+o+" found which is not a constant or variable in an active $f statement"),{value:null}):void n.push(o)},i=this;this.tokens.length;){var a=s();if("object"==typeof a)return a.value;if("break"===a)break}return this.tokens.length?n:(console.error("Unfinished $"+t+" statement "+e),null)},e.prototype.makesubstitution=function(t,e){for(var r=[],n=0;n<t.length;++n){var o=e[t[n]];void 0===o?r.push(t[n]):r=r.concat(o)}return r},e.prototype.getproofnumbers=function(t,e){for(var r=[],n=0,o=!1,s=0;s<e.length;++s)if(e[s]<="T"){var i=e.charCodeAt(s)-("A".charCodeAt(0)-1);if(n>Number.MAX_SAFE_INTEGER/20||20*n>Number.MAX_SAFE_INTEGER-i)return console.error("Overflow computing numbers in compressed proof of "+t),null;r.push(20*n+i),n=0,o=!0}else if(e[s]<="Y"){i=e.charCodeAt(s)-"T".charCodeAt(0);if(n>Number.MAX_SAFE_INTEGER/5||5*n>Number.MAX_SAFE_INTEGER-i)return console.error("Overflow computing numbers in compressed proof of "+t),null;n=5*n+i,o=!1}else{if(!o)return console.error("Stray Z found in compressed proof of "+t),null;r.push(0),o=!1}return 0!==n?(console.error("Compressed proof of theorem "+t+" ends in unfinished number"),null):r},e.prototype.verifyassertionref=function(t,e,r){var n=this.assertions[e];if(!n)return console.error("In proof of theorem "+t+" assertion "+e+" is undefined"),null;if(r.length<n.hypotheses.length)return console.error("In proof of theorem "+t+" not enough items found on stack"),null;for(var o=r.length-n.hypotheses.length,s={},i=0;i<n.hypotheses.length;++i){var a=this.hypotheses[n.hypotheses[i]];if(!a)return console.error("In proof of theorem "+t+" hypothesis "+n.hypotheses[i]+" is undefined"),null;if(a.second){if(a.first[0]!==r[o+i][0])return console.error("In proof of theorem "+t+" unification failed"),null;var u=r[o+i].slice(1);s[a.first[1]]=u}else{if(!p(this.makesubstitution(a.first,s),r[o+i]))return console.error("In proof of theorem "+t+" unification failed"),null}}r=r.slice(0,o);for(var c=0;c<n.disjvars.length;++c){for(var f=s[n.disjvars[c][0]],l=s[n.disjvars[c][1]],h=[],v=0;v<f.length;++v)this.variables.has(f[v])&&h.push(f[v]);for(var d=[],y=0;y<l.length;++y)this.variables.has(l[y])&&d.push(l[y]);for(v=0;v<h.length;++v)for(y=0;y<d.length;++y)if(!this.isdvr(h[v],d[y]))return console.error("In proof of theorem "+t+" disjoint variable restriction violated"),null}var m=this.makesubstitution(n.expression,s);return r.push(m),r},e.prototype.verifyregularproof=function(t,e,r){for(var n=[],o=0;o<r.length;++o){var s=this.hypotheses[r[o]];if(s)n.push(s.first);else if(null===(n=this.verifyassertionref(t,r[o],n)))return!1}return 1!==n.length?(console.error("Proof of theorem "+t+" does not end with only one item on the stack"),!1):!!p(n[0],e.expression)||(console.error("Proof of theorem "+t+" proves wrong statement"),!1)},e.prototype.verifycompressedproof=function(t,e,r,n){for(var o=[],s=e.hypotheses.length,i=s+r.length,a=[],u=0;u<n.length;++u)if(0!==n[u])if(n[u]<=s)o.push(this.hypotheses[e.hypotheses[n[u]-1]].first);else if(n[u]<=i){var c=r[n[u]-s-1],f=this.hypotheses[c];if(f){o.push(f.first);continue}if(null===(o=this.verifyassertionref(t,c,o)))return!1}else{if(n[u]>i+a.length)return console.error("Number in compressed proof of "+t+" is too high"),!1;o.push(a[n[u]-i-1])}else a.push(o[o.length-1]);return 1!==o.length?(console.error("Proof of theorem "+t+" does not end with only one item on the stack"),!1):!!p(o[0],e.expression)||(console.error("Proof of theorem "+t+" proves wrong statement"),!1)},e.prototype.parsep=function(t){var e=this.readexpression("p",t,"$=");if(!e)return!1;var r=this.constructassertion(t,e);if(!this.tokens.length)return console.error("Unfinished $p statement "+t),!1;if("("===this.tokens[0]){this.tokens.shift();for(var n=[],o=function(){var e=s.tokens[0];return")"===e?"break":(s.tokens.shift(),n.push(e),e===t?(console.error("Proof of theorem "+t+" refers to itself"),{value:!1}):void 0!==r.hypotheses.find(function(t){return t===e})?(console.error("Compressed proof of theorem "+t+" has mandatory hypothesis "+e+" in label list"),{value:!1}):s.assertions[e]||s.isactivehyp(e)?void 0:(console.error("Proof of theorem "+t+" refers to "+e+" which is not an active statement"),{value:!1}))},s=this;this.tokens.length;){var i=o();if("object"==typeof i)return i.value;if("break"===i)break}if(!this.tokens.length)return console.error("Unfinished $p statement "+t),!1;this.tokens.shift();for(var a="";this.tokens.length;){if("$."===(f=this.tokens[0]))break;if(this.tokens.shift(),a+=f,!this.containsonlyupperorq(f))return console.error("Bogus character found in compressed proof of "+t),!1}if(!this.tokens.length)return console.error("Unfinished $p statement "+t),!1;if(!a.length)return console.error("Theorem "+t+" has no proof"),!1;if(this.tokens.shift(),-1!==a.indexOf("?"))return console.error("Warning: Proof of theorem "+t+" is incomplete"),!0;var u=this.getproofnumbers(t,a);if(!u)return!1;if(!this.verifycompressedproof(t,r,n,u))return!1}else{a=[];for(var c=!1;this.tokens.length;){var f;if("$."===(f=this.tokens[0]))break;if(this.tokens.shift(),a.push(f),"?"===f)c=!0;else{if(f===t)return console.error("Proof of theorem "+t+" refers to itself"),!1;if(!this.assertions[f]&&!this.isactivehyp(f))return console.error("Proof of theorem "+t+" refers to "+f+" which is not an active statement"),!1}}if(!this.tokens.length)return console.error("Unfinished $p statement "+t),!1;if(!a.length)return console.error("Theorem "+t+" has no proof"),!1;if(this.tokens.shift(),c)return console.error("Warning: Proof of theorem "+t+" is incomplete"),!0;if(!this.verifyregularproof(t,r,a))return!1}return!0},e.prototype.parsee=function(t){var e=this.readexpression("e",t,"$.");return!!e&&(this.hypotheses[t]={first:e,second:!1},this.scopes[this.scopes.length-1].activehyp.push(t),!0)},e.prototype.parsea=function(t){var e=this.readexpression("a",t,"$.");return!!e&&(this.constructassertion(t,e),!0)},e.prototype.parsef=function(t){if(!this.tokens.length)return console.error("Unfinished $f statement"+t),!1;var e=this.tokens[0];if(void 0===this.constants.find(function(t){return t===e}))return console.error("First symbol in $f statement "+t+" is "+e+" which is not a constant"),!1;if(this.tokens.shift(),!this.tokens.length)return console.error("Unfinished $f statement"+t),!1;var r=this.tokens[0];if(!this.isactivevariable(r))return console.error("Second symbol in $f statement "+t+" is "+r+" which is not an active variable"),!1;if(this.getfloatinghyp(r).length)return console.error("The variable "+r+" appears in a second $f statement "+t),!1;if(this.tokens.shift(),!this.tokens.length)return console.error("Unfinished $f statement"+t),!1;if("$."!==this.tokens[0])return console.error("Expected end of $f statement "+t+" but found "+this.tokens[0]),!1;this.tokens.shift();var n=[];return n.push(e),n.push(r),this.hypotheses[t]={first:n,second:!0},this.scopes[this.scopes.length-1].activehyp.push(t),this.scopes[this.scopes.length-1].floatinghyp[r]=t,!0},e.prototype.parselabel=function(t){if(void 0!==this.constants.find(function(e){return e===t}))return console.error("Attempt to reuse constant "+t+" as a label"),!1;if(this.variables.has(t))return console.error("Attempt to reuse variable "+t+" as a label"),!1;if(this.labelused(t))return console.error("Attempt to reuse label "+t),!1;if(!this.tokens.length)return console.error("Unfinished labeled statement"),!1;var e=this.tokens.shift(),r=!0;if("$p"===e)r=this.parsep(t),++this.nProofCount;else if("$e"===e)r=this.parsee(t);else if("$a"===e)r=this.parsea(t);else{if("$f"!==e)return console.error("Unexpected token "+e+" encountered"),!1;r=this.parsef(t)}return r},e.prototype.parsed=function(){for(var t=new Set;this.tokens.length;){var e=this.tokens[0];if("$."===e)break;if(this.tokens.shift(),!this.isactivevariable(e))return console.error("Token "+e+" is not an active variable, but was found in a $d statement"),!1;if(t.has(e))return console.error("$d statement mentions "+e+" twice"),!1;t.add(e)}return this.tokens.length?t.size<2?(console.error("Not enough items in $d statement"),!1):(this.scopes[this.scopes.length-1].disjvars.push(t),this.tokens.shift(),!0):(console.error("Unterminated $d statement"),!1)},e.prototype.parsec=function(){if(this.scopes.length>1)return console.error("$c statement occurs in inner block"),!1;for(var t=!0,e=function(){var e=r.tokens[0];return"$."===e?"break":(r.tokens.shift(),t=!1,r.ismathsymboltoken(e)?r.variables.has(e)?(console.error("Attempt to redeclare variable "+e+" as a constant"),{value:!1}):r.labelused(e)?(console.error("Attempt to reuse label "+e+" as a constant"),{value:!1}):void 0!==r.constants.find(function(t){return t===e})?(console.error("Attempt to redeclare constant "+e),{value:!1}):void r.constants.push(e):(console.error("Attempt to declare "+e+" as a constant"),{value:!1}))},r=this;this.tokens.length;){var n=e();if("object"==typeof n)return n.value;if("break"===n)break}return this.tokens.length?t?(console.error("Unterminated $c statement"),!1):(this.tokens.shift(),!0):(console.error("Unterminated $c statement"),!1)},e.prototype.parsev=function(){for(var t=!0,e=function(){var e=r.tokens[0];return"$."===e?"break":(r.tokens.shift(),t=!1,r.ismathsymboltoken(e)?void 0!==r.constants.find(function(t){return t===e})?(console.error("Attempt to redeclare constant "+e+" as a variable"),{value:!1}):r.labelused(e)?(console.error("Attempt to reuse label "+e+" as a variable"),{value:!1}):r.isactivevariable(e)?(console.error("Attempt to redeclare active variable "+e),{value:!1}):(r.variables.add(e),void r.scopes[r.scopes.length-1].activevariables.add(e)):(console.error("Attempt to declare "+e+" as a variable"),{value:!1}))},r=this;this.tokens.length;){var n=e();if("object"==typeof n)return n.value;if("break"===n)break}return this.tokens.length?t?(console.error("Empty $v statement"),!1):(this.tokens.shift(),!0):(console.error("Unterminated $v statement"),!1)},e.prototype.checkmm=function(){for(this.scopes.push(new d);this.tokens.length;){var t=this.tokens.shift(),e=!0;if(this.islabeltoken(t))e=this.parselabel(t);else if("$d"===t)e=this.parsed();else if("${"===t)this.scopes.push(new d);else if("$}"===t){if(this.scopes.pop(),!this.scopes.length)return console.error("$} without corresponding ${"),!1}else if("$c"===t)e=this.parsec();else{if("$v"!==t)return console.error("Unexpected token "+t+" encountered"),!1;e=this.parsev()}if(!e)return!1;if(this.nProofCount>=this.nProofLimit)return console.log("Proof limit reached"),console.log("Successfully verified "+this.nProofCount+" proofs"),!0}return this.scopes.length>1?(console.error("${ without corresponding $}"),!1):(console.log("Successfully verified "+this.nProofCount+" proofs\n"),!0)},e}(y);e.CheckMM=m;var b=1;t.argv.length>=2&&l.basename(t.argv[1])===l.basename(n)&&(t.exitCode=function(t){var e=new m;if(3===t.length){var r=parseInt(t[2],10);r?e.nProofLimit=r:console.error("Invalid proof limit"+t[2]),t.pop()}if(2!==t.length)return console.error("Syntax: node checkmm.js <filename> [<proof-limit>]"),b;e.setState({});var n=e.readtokens(t[1]);return n&&(n=e.checkmm())?0:b}(t.argv.slice(1)))}).call(this,r(0),"/index.js")},function(t,e){},function(t,e,r){(function(t){function r(t,e){for(var r=0,n=t.length-1;n>=0;n--){var o=t[n];"."===o?t.splice(n,1):".."===o?(t.splice(n,1),r++):r&&(t.splice(n,1),r--)}if(e)for(;r--;r)t.unshift("..");return t}var n=/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/,o=function(t){return n.exec(t).slice(1)};function s(t,e){if(t.filter)return t.filter(e);for(var r=[],n=0;n<t.length;n++)e(t[n],n,t)&&r.push(t[n]);return r}e.resolve=function(){for(var e="",n=!1,o=arguments.length-1;o>=-1&&!n;o--){var i=o>=0?arguments[o]:t.cwd();if("string"!=typeof i)throw new TypeError("Arguments to path.resolve must be strings");i&&(e=i+"/"+e,n="/"===i.charAt(0))}return(n?"/":"")+(e=r(s(e.split("/"),function(t){return!!t}),!n).join("/"))||"."},e.normalize=function(t){var n=e.isAbsolute(t),o="/"===i(t,-1);return(t=r(s(t.split("/"),function(t){return!!t}),!n).join("/"))||n||(t="."),t&&o&&(t+="/"),(n?"/":"")+t},e.isAbsolute=function(t){return"/"===t.charAt(0)},e.join=function(){var t=Array.prototype.slice.call(arguments,0);return e.normalize(s(t,function(t,e){if("string"!=typeof t)throw new TypeError("Arguments to path.join must be strings");return t}).join("/"))},e.relative=function(t,r){function n(t){for(var e=0;e<t.length&&""===t[e];e++);for(var r=t.length-1;r>=0&&""===t[r];r--);return e>r?[]:t.slice(e,r-e+1)}t=e.resolve(t).substr(1),r=e.resolve(r).substr(1);for(var o=n(t.split("/")),s=n(r.split("/")),i=Math.min(o.length,s.length),a=i,u=0;u<i;u++)if(o[u]!==s[u]){a=u;break}var c=[];for(u=a;u<o.length;u++)c.push("..");return(c=c.concat(s.slice(a))).join("/")},e.sep="/",e.delimiter=":",e.dirname=function(t){var e=o(t),r=e[0],n=e[1];return r||n?(n&&(n=n.substr(0,n.length-1)),r+n):"."},e.basename=function(t,e){var r=o(t)[2];return e&&r.substr(-1*e.length)===e&&(r=r.substr(0,r.length-e.length)),r},e.extname=function(t){return o(t)[3]};var i="b"==="ab".substr(-1)?function(t,e,r){return t.substr(e,r)}:function(t,e,r){return e<0&&(e=t.length+e),t.substr(e,r)}}).call(this,r(0))},function(t,e,r){(function(t,r){var n=200,o="__lodash_hash_undefined__",s=9007199254740991,i="[object Arguments]",a="[object Boolean]",u="[object Date]",c="[object Function]",f="[object GeneratorFunction]",l="[object Map]",h="[object Number]",p="[object Object]",v="[object RegExp]",d="[object Set]",y="[object String]",m="[object Symbol]",b="[object ArrayBuffer]",g="[object DataView]",_="[object Float32Array]",k="[object Float64Array]",j="[object Int8Array]",w="[object Int16Array]",$="[object Int32Array]",A="[object Uint8Array]",O="[object Uint8ClampedArray]",x="[object Uint16Array]",P="[object Uint32Array]",S=/\w*$/,T=/^\[object .+?Constructor\]$/,E=/^(?:0|[1-9]\d*)$/,M={};M[i]=M["[object Array]"]=M[b]=M[g]=M[a]=M[u]=M[_]=M[k]=M[j]=M[w]=M[$]=M[l]=M[h]=M[p]=M[v]=M[d]=M[y]=M[m]=M[A]=M[O]=M[x]=M[P]=!0,M["[object Error]"]=M[c]=M["[object WeakMap]"]=!1;var U="object"==typeof t&&t&&t.Object===Object&&t,C="object"==typeof self&&self&&self.Object===Object&&self,F=U||C||Function("return this")(),I=e&&!e.nodeType&&e,N=I&&"object"==typeof r&&r&&!r.nodeType&&r,L=N&&N.exports===I;function R(t,e){return t.set(e[0],e[1]),t}function z(t,e){return t.add(e),t}function B(t,e,r,n){var o=-1,s=t?t.length:0;for(n&&s&&(r=t[++o]);++o<s;)r=e(r,t[o],o,t);return r}function D(t){var e=!1;if(null!=t&&"function"!=typeof t.toString)try{e=!!(t+"")}catch(t){}return e}function G(t){var e=-1,r=Array(t.size);return t.forEach(function(t,n){r[++e]=[n,t]}),r}function W(t,e){return function(r){return t(e(r))}}function X(t){var e=-1,r=Array(t.size);return t.forEach(function(t){r[++e]=t}),r}var Z,q=Array.prototype,V=Function.prototype,Y=Object.prototype,H=F["__core-js_shared__"],J=(Z=/[^.]+$/.exec(H&&H.keys&&H.keys.IE_PROTO||""))?"Symbol(src)_1."+Z:"",K=V.toString,Q=Y.hasOwnProperty,tt=Y.toString,et=RegExp("^"+K.call(Q).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),rt=L?F.Buffer:void 0,nt=F.Symbol,ot=F.Uint8Array,st=W(Object.getPrototypeOf,Object),it=Object.create,at=Y.propertyIsEnumerable,ut=q.splice,ct=Object.getOwnPropertySymbols,ft=rt?rt.isBuffer:void 0,lt=W(Object.keys,Object),ht=Nt(F,"DataView"),pt=Nt(F,"Map"),vt=Nt(F,"Promise"),dt=Nt(F,"Set"),yt=Nt(F,"WeakMap"),mt=Nt(Object,"create"),bt=Dt(ht),gt=Dt(pt),_t=Dt(vt),kt=Dt(dt),jt=Dt(yt),wt=nt?nt.prototype:void 0,$t=wt?wt.valueOf:void 0;function At(t){var e=-1,r=t?t.length:0;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}function Ot(t){var e=-1,r=t?t.length:0;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}function xt(t){var e=-1,r=t?t.length:0;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}function Pt(t){this.__data__=new Ot(t)}function St(t,e){var r=Wt(t)||function(t){return function(t){return function(t){return!!t&&"object"==typeof t}(t)&&Xt(t)}(t)&&Q.call(t,"callee")&&(!at.call(t,"callee")||tt.call(t)==i)}(t)?function(t,e){for(var r=-1,n=Array(t);++r<t;)n[r]=e(r);return n}(t.length,String):[],n=r.length,o=!!n;for(var s in t)!e&&!Q.call(t,s)||o&&("length"==s||zt(s,n))||r.push(s);return r}function Tt(t,e,r){var n=t[e];Q.call(t,e)&&Gt(n,r)&&(void 0!==r||e in t)||(t[e]=r)}function Et(t,e){for(var r=t.length;r--;)if(Gt(t[r][0],e))return r;return-1}function Mt(t,e,r,n,o,s,T){var E;if(n&&(E=s?n(t,o,s,T):n(t)),void 0!==E)return E;if(!Vt(t))return t;var U=Wt(t);if(U){if(E=function(t){var e=t.length,r=t.constructor(e);e&&"string"==typeof t[0]&&Q.call(t,"index")&&(r.index=t.index,r.input=t.input);return r}(t),!e)return function(t,e){var r=-1,n=t.length;e||(e=Array(n));for(;++r<n;)e[r]=t[r];return e}(t,E)}else{var C=Rt(t),F=C==c||C==f;if(Zt(t))return function(t,e){if(e)return t.slice();var r=new t.constructor(t.length);return t.copy(r),r}(t,e);if(C==p||C==i||F&&!s){if(D(t))return s?t:{};if(E=function(t){return"function"!=typeof t.constructor||Bt(t)?{}:(e=st(t),Vt(e)?it(e):{});var e}(F?{}:t),!e)return function(t,e){return Ft(t,Lt(t),e)}(t,function(t,e){return t&&Ft(e,Yt(e),t)}(E,t))}else{if(!M[C])return s?t:{};E=function(t,e,r,n){var o=t.constructor;switch(e){case b:return Ct(t);case a:case u:return new o(+t);case g:return function(t,e){var r=e?Ct(t.buffer):t.buffer;return new t.constructor(r,t.byteOffset,t.byteLength)}(t,n);case _:case k:case j:case w:case $:case A:case O:case x:case P:return function(t,e){var r=e?Ct(t.buffer):t.buffer;return new t.constructor(r,t.byteOffset,t.length)}(t,n);case l:return function(t,e,r){return B(e?r(G(t),!0):G(t),R,new t.constructor)}(t,n,r);case h:case y:return new o(t);case v:return(c=new(i=t).constructor(i.source,S.exec(i))).lastIndex=i.lastIndex,c;case d:return function(t,e,r){return B(e?r(X(t),!0):X(t),z,new t.constructor)}(t,n,r);case m:return s=t,$t?Object($t.call(s)):{}}var s;var i,c}(t,C,Mt,e)}}T||(T=new Pt);var I=T.get(t);if(I)return I;if(T.set(t,E),!U)var N=r?function(t){return function(t,e,r){var n=e(t);return Wt(t)?n:function(t,e){for(var r=-1,n=e.length,o=t.length;++r<n;)t[o+r]=e[r];return t}(n,r(t))}(t,Yt,Lt)}(t):Yt(t);return function(t,e){for(var r=-1,n=t?t.length:0;++r<n&&!1!==e(t[r],r,t););}(N||t,function(o,s){N&&(o=t[s=o]),Tt(E,s,Mt(o,e,r,n,s,t,T))}),E}function Ut(t){return!(!Vt(t)||(e=t,J&&J in e))&&(qt(t)||D(t)?et:T).test(Dt(t));var e}function Ct(t){var e=new t.constructor(t.byteLength);return new ot(e).set(new ot(t)),e}function Ft(t,e,r,n){r||(r={});for(var o=-1,s=e.length;++o<s;){var i=e[o],a=n?n(r[i],t[i],i,r,t):void 0;Tt(r,i,void 0===a?t[i]:a)}return r}function It(t,e){var r,n,o=t.__data__;return("string"==(n=typeof(r=e))||"number"==n||"symbol"==n||"boolean"==n?"__proto__"!==r:null===r)?o["string"==typeof e?"string":"hash"]:o.map}function Nt(t,e){var r=function(t,e){return null==t?void 0:t[e]}(t,e);return Ut(r)?r:void 0}At.prototype.clear=function(){this.__data__=mt?mt(null):{}},At.prototype.delete=function(t){return this.has(t)&&delete this.__data__[t]},At.prototype.get=function(t){var e=this.__data__;if(mt){var r=e[t];return r===o?void 0:r}return Q.call(e,t)?e[t]:void 0},At.prototype.has=function(t){var e=this.__data__;return mt?void 0!==e[t]:Q.call(e,t)},At.prototype.set=function(t,e){return this.__data__[t]=mt&&void 0===e?o:e,this},Ot.prototype.clear=function(){this.__data__=[]},Ot.prototype.delete=function(t){var e=this.__data__,r=Et(e,t);return!(r<0||(r==e.length-1?e.pop():ut.call(e,r,1),0))},Ot.prototype.get=function(t){var e=this.__data__,r=Et(e,t);return r<0?void 0:e[r][1]},Ot.prototype.has=function(t){return Et(this.__data__,t)>-1},Ot.prototype.set=function(t,e){var r=this.__data__,n=Et(r,t);return n<0?r.push([t,e]):r[n][1]=e,this},xt.prototype.clear=function(){this.__data__={hash:new At,map:new(pt||Ot),string:new At}},xt.prototype.delete=function(t){return It(this,t).delete(t)},xt.prototype.get=function(t){return It(this,t).get(t)},xt.prototype.has=function(t){return It(this,t).has(t)},xt.prototype.set=function(t,e){return It(this,t).set(t,e),this},Pt.prototype.clear=function(){this.__data__=new Ot},Pt.prototype.delete=function(t){return this.__data__.delete(t)},Pt.prototype.get=function(t){return this.__data__.get(t)},Pt.prototype.has=function(t){return this.__data__.has(t)},Pt.prototype.set=function(t,e){var r=this.__data__;if(r instanceof Ot){var o=r.__data__;if(!pt||o.length<n-1)return o.push([t,e]),this;r=this.__data__=new xt(o)}return r.set(t,e),this};var Lt=ct?W(ct,Object):function(){return[]},Rt=function(t){return tt.call(t)};function zt(t,e){return!!(e=null==e?s:e)&&("number"==typeof t||E.test(t))&&t>-1&&t%1==0&&t<e}function Bt(t){var e=t&&t.constructor;return t===("function"==typeof e&&e.prototype||Y)}function Dt(t){if(null!=t){try{return K.call(t)}catch(t){}try{return t+""}catch(t){}}return""}function Gt(t,e){return t===e||t!=t&&e!=e}(ht&&Rt(new ht(new ArrayBuffer(1)))!=g||pt&&Rt(new pt)!=l||vt&&"[object Promise]"!=Rt(vt.resolve())||dt&&Rt(new dt)!=d||yt&&"[object WeakMap]"!=Rt(new yt))&&(Rt=function(t){var e=tt.call(t),r=e==p?t.constructor:void 0,n=r?Dt(r):void 0;if(n)switch(n){case bt:return g;case gt:return l;case _t:return"[object Promise]";case kt:return d;case jt:return"[object WeakMap]"}return e});var Wt=Array.isArray;function Xt(t){return null!=t&&function(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=s}(t.length)&&!qt(t)}var Zt=ft||function(){return!1};function qt(t){var e=Vt(t)?tt.call(t):"";return e==c||e==f}function Vt(t){var e=typeof t;return!!t&&("object"==e||"function"==e)}function Yt(t){return Xt(t)?St(t):function(t){if(!Bt(t))return lt(t);var e=[];for(var r in Object(t))Q.call(t,r)&&"constructor"!=r&&e.push(r);return e}(t)}r.exports=function(t){return Mt(t,!0,!0)}}).call(this,r(6),r(7)(t))},function(t,e){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(t){"object"==typeof window&&(r=window)}t.exports=r},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,